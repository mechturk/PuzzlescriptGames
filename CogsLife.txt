title A Cog's Life
author Dennis Au
run_rules_on_level_start
again_interval 0.5
debug

========
OBJECTS
========

Floor
DarkBlue


Rot0
DarkGreen
.....
..0..
.....
.....
.....

Rot1
DarkGreen
.....
.....
...0.
.....
.....

Rot2
DarkGreen
.....
.....
.....
..0..
.....

Rot3
DarkGreen
.....
.....
.0...
.....
.....

Player
White
.....
.000.
.0.0.
.000.
.....

Cog o
LightGrey Grey DarkGrey
..1..
.000.
20.01
.000.
..2..


CWiser
Blue
.....
.000.
.0.0.
.000.
.....

ACWiser
Green
.....
.000.
.0.0.
.000.
.....

RackV /
DarkGrey
.0...
.0...
00...
.0...
.0...

RackH -
Grey
..0..
00000
.....
.....
.....

MovementError
LightRed
0...0
.....
.....
.....
0...0

goal g
green

Wall #
Grey DarkGrey
00100
11111
00001
11111
00100

=======
LEGEND
=======
. = Floor

P = Player and Cog
C = CWiser and Cog
A = ACWiser and Cog

Background = Floor or Goal
Rack = RackV or RackH
Rotatable = Cog
Obstacle = Wall
RotationState = Rot0 or Rot1 or Rot2 or Rot3
Moveable = Cog or Rack

=======
SOUNDS
=======
sfx0 40497702

================
COLLISIONLAYERS
================
Background
Rotatable, Rack, Wall
Player, CWiser, ACWiser
MovementError
RotationState

======
RULES
======

[MovementError] -> []
[Rotatable No RotationState] -> [Rotatable Random RotationState]

(=================
 translation phase
 =================)

(use cog for collision detection)
[Up Player Cog Rot0] -> [Player Up Cog Rot0]
[Up Player Cog Rot1] -> [Player Right Cog Rot1]
[Up Player Cog Rot2] -> [Player Down Cog Rot2]
[Up Player Cog Rot3] -> [Player Left Cog Rot3]

[Down Player Cog Rot0] -> [Player Down Cog Rot0]
[Down Player Cog Rot1] -> [Player Left Cog Rot1]
[Down Player Cog Rot2] -> [Player Up Cog Rot2]
[Down Player Cog Rot3] -> [Player Right Cog Rot3]

Vertical [Player > Cog| RackV] -> [Player > Cog| > RackV]
Vertical [> RackV| RackV] -> [> RackV| > RackV]
Horizontal [Player > Cog| RackH] -> [Player > Cog| > RackH]
Horizontal [> RackH| RackH] -> [> RackH| > RackH]

(==============
 rotation phase
 ==============)
 
(use rotationstate to transfer rotation)

[Right Player RotationState] -> [Right Player Right RotationState]
[Left Player RotationState] -> [Left Player Left RotationState]

startloop
(cog/cog)

[left RotationState|left RotationState] -> [MovementError RotationState|MovementError RotationState]
[right RotationState|right RotationState] -> [MovementError RotationState|MovementError RotationState]


[Left Rotationstate| No MovementError Rotationstate] -> [Left Rotationstate| Right Rotationstate]
+[Right RotationState | No MovementError RotationState] -> [Right RotationState| Left RotationState]

[MovementError RotationState| No MovementError RotationState] -> [MovementError RotationState| MovementError RotationState]

(cog/rack)
Right [Right RotationState|RackV] -> [Right RotationState| Down RackV]
Right [Left RotationState|RackV] -> [Left RotationState| Up RackV]
Right [MovementError RotationState|RackV] -> [MovementError RotationState|MovementError stationary RackV]

Down [Right RotationState| RackH] -> [Right RotationState| Left RackH]
Down [Left RotationState| RackH] -> [Left RotationState| Right RackH]
Down [MovementError RotationState|RackH] -> [MovementError RotationState|MovementError stationary RackH]

(contigious rack)
Vertical [Parallel RackV| Stationary RackV] -> [Parallel RackV| Parallel RackV]
Vertical [> RackV| < RackV] -> [MovementError RackV|MovementError RackV]
Vertical [< RackV| > RackV] -> [MovementError RackV|MovementError RackV]
Vertical [MovementError RackV| RackV] -> [MovementError RackV| MovementError RackV] 

Horizontal [Parallel RackH| Stationary RackH] -> [Parallel RackH| Parallel RackH]
Horizontal [> RackH| < RackH] -> [MovementError RackH|MovementError RackH]
Horizontal [< RackH| > RackH] -> [MovementError RackH|MovementError RackH]
Horizontal [MovementError RackH| RackH] -> [MovementError RackH| MovementError RackH]

(rack/cog)
Right [RotationState|Down RackV] -> [Right RotationState| Down RackV]
Right [RotationState|Up RackV] -> [Left RotationState| Up RackV]

Right [RotationState|movementError RackV] -> [MovementError stationary RotationState|MovementError RackV]

Down [RotationState| Left RackH] -> [Right RotationState| Left RackH]
Down [RotationState| Right RackH] -> [Left RotationState| Right RackH]

Down [RotationState| MovementError RackH] -> [MovementError stationary RotationState|MovementError RackH]

[MovementError Moveable] -> [MovementError Stationary Moveable] again
[MovementError RotationState] -> [MovementError Stationary RotationState] sfx0
endloop


[right Rot0] -> [Rot1]
[right Rot1] -> [Rot2]
[right Rot2] -> [Rot3]
[right Rot3] -> [Rot0]

[left rot0] -> [rot3]
[left rot3] -> [rot2]
[left rot2] -> [rot1]
[left rot1] -> [rot0]

Horizontal [> Player] -> [Player]

(final translation)

rigid [Player > Cog |Cog RotationState] -> [Player > Cog| > Cog > RotationState]
rigid [Player > Cog RotationState] -> [> Player > Cog > RotationState]


==============
WINCONDITIONS
==============
all goal on player

=======
LEVELS
=======

(
........coo.......
........o.o.......
........ooo.......
........o.o.......
........o.o.......
..........--------

.coo.aoo.coo.a.coo
.o...o.o.o...o.o..
.o...o.o.o.....ooo
.o...o.o.o.o.....o
.ooo.ooo.ooo...ooo

...c...a.coo.aoo..
...o...o.o...o....
...o...o.ooo.ooo..
...o...o.o...o....
...ooo.o.o...ooo..
)

..###.
###.##
#p./.#
#../.#
###/.#
.../.#
g.o..#
##o#.#
.#...#
.#####

.......g
.....o/.
.../../.
..p/.o/.
..----/.
....../.

.o.........g
p.....o...
.--------...
