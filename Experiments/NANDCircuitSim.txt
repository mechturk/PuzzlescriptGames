title NAND Circuit Simulator
author Dennis Au
run_rules_on_level_start
again_interval 0

========
OBJECTS
========

Background
DarkGrey

NAND
white black
000..
0..0.
0..1.
0..0.
000..

Input
White
.....
..0..
.0.0.
..0..
.....


Output
White
.....
.0...
..0..
.0...
.....

Wire
Grey

Player
Green
0...0
.....
.....
.....
0...0

Source
Blue Grey
00000
00100
01110
00100
00000

High
Blue

Low
Red

Ground
Red Grey
00000
00000
01110
00000
00000

Cross
white
..0..
..0..
00000
..0..
..0..

Next
Green White
11111
11011
11101
11011
11111

=======
LEGEND
=======

Gate = NAND

n = NAND
i = Input and Wire
o = Output and Wire
p = player and next
+ = wire
s = source
x = cross
. = background
g = ground
=======
SOUNDS
=======

================
COLLISIONLAYERS
================
Background
Wire
High, Low
Source, Gate, Input, Output, Cross, Ground
Next
Player


======
RULES
======

[Action Player Source] -> [Player Ground]
[Action Player Ground] -> [Player Source]
[Action Player Next] -> win

(propogate low)
[Ground|Wire] -> [Ground|Low Wire]
[Low Wire|Wire No Output] -> [Low Wire|Low Wire]
[Low|Cross|] -> [Low|Cross|Low]

(propogate high)
[Source|Wire] -> [Source|High Wire]
[High Wire|Wire No Output] -> [High Wire|High Wire]
[High|Cross|] -> [High|Cross|High]

(process NAND logic)
[NAND] -> [Action NAND]
Vertical [High Input|action NAND|High Input] -> [High Input|stationary NAND|High Input]
Right [Stationary Nand|Output] -> [Stationary Nand|Low Output] again
Right [Action Nand|Output] -> [Action Nand|High Output] again

==============
WINCONDITIONS
==============

=======
LEVELS
=======

(The following chips are built to the specifications outlined in "The Elements of Computing Systems" by Nisan & Schocken. Go to www.nand2tetris.org to find out more)

message Press x when over +/- to toggle input states
message Press x when over the green > to go the next circuit

(nand)
message Circuit 01: NAND Gate
s+i.
p.no
g+i.


(not)
message Circuit 02: NOT Gate
g+i.
p+no
.+i.

(and)
message Circuit 03: AND Gate
s+i.+i.
p.no+no
g+i.+i.


(or)
message Circuit 04: OR Gate
p.+i...
..+no+.
s++i.i.
.....no
s++i.i.
..+no+.
..+i...

(xor)
message Circuit 05: XOR Gate
p.++i...
g+i.noi.
..noi.no
s+i.noi.
..++i...

(2:1 mux)
(either there should actually be an or gate at the end of this one or I should implement a tristate buffer, but in the meantime, high + low = high)
message Circuit 06: 2-1 Multiplexer
p.+++++......
g++...i.+i... (> a)
...+i.no+no+.
g+++noi.+i.+. (> sel)
...+i......++
s++.++i.+i.+. (> b)
..+...no+no+. 
..++++i.+i...

(1:2 dmux)
message Circuit 07: 1-2 Demultiplexer
p..+i.+i.+i....
g+++no+no+no++. (> sel)
...+i..i.+i..++ (a >)
s++.+++xi..+i.. (> input, b >)
..+....+no++no+ 
..++++++i..+i..






