title A Cog's Life
author Dennis Au
run_rules_on_level_start
again_interval 0.10
noaction
background_color purple

========
OBJECTS
========

Floor
Black


RotU
DarkGreen
.....
..0..
.....
.....
.....

RotR
DarkGreen
.....
.....
...0.
.....
.....

RotD
DarkGreen
.....
.....
.....
..0..
.....

RotL
DarkGreen
.....
.....
.0...
.....
.....

NRotU
LightGreen
.....
..0..
.....
.....
.....

NRotR
LightGreen
.....
.....
...0.
.....
.....

NRotD
LightGreen
.....
.....
.....
..0..
.....

NRotL
LightGreen
.....
.....
.0...
.....
.....


Player
White
.....
.000.
.0.0.
.000.
.....

Cog
LightGrey Grey DarkGrey
..1..
.000.
20.01
.000.
..2..

TwiddleH
LightGrey Grey DarkGrey
.....
.000.
20.01
.000.
.....

TwiddleV
LightGrey Grey DarkGrey
..1..
.000.
.0.0.
.000.
..2..


RackV
DarkGrey
.0...
.0...
00...
.0...
.0...

RackH
Grey
..0..
00000
.....
.....
.....

MovementError
Red
0...0
.....
.....
.....
0...0

goal
LightGrey Grey
.....
01010
01010
01010
.....

Wall
DarkBlue DarkGreen
.1111
01111
00111
00011
0000.


=======
LEGEND
=======


Background = Floor or Goal

Rack = RackV or RackH
Twiddle = TwiddleH or TwiddleV

Rotatable = Cog or Twiddle
HRotatable = Cog or TwiddleH
VRotatable = Cog or TwiddleV

Obstacle = Wall or Cog
VObstacle = Obstacle or RackH
ObstacleH = Obstacle or RackV

Moveable = Cog or Rack

RotationState = RotU or RotR or RotD or RotL
NextRotation = NRotU or NRotR or NRotD or NRotL

(rotators)
CU = RotU and NRotR
CR = RotR and NRotD
CD = RotD and NRotL
CL = RotL and NRotU

AU = RotU and NRotL
AL = RotL and NRotD
AD = RotD and NRotR
AR = RotR and NRotU

(=========
 map tiles
 =========)

. = Floor
g = Goal
# = Wall
o = Cog
P = Player and Cog (main player)
- = RackH
/ = RackV

(
(twiddles)
~ = TwiddleH
! = TwiddleV
T = Player and TwiddleV

(rotors - cogs)
C = CU and Cog and MovementError
A = AU and Cog and MovementError

(rotors - twiddles)
` = CU and TwiddleH and MovementError
@ = AU and TwiddleH and MovementError
1 = CU and TwiddleV and MovementError
2 = AU and TwiddleV and MovementError

0 = Player (cutscene timer)
)
=======
SOUNDS
=======
sfx0 40497702
endlevel 54673903

================
COLLISIONLAYERS
================
Background
Rotatable, Rack, Wall
Player, NextRotation
MovementError
RotationState

======
RULES
======
(==============
 Initialisation
 ==============)
(randomize)
(randomize autorotating cog initial orientations)
[Player No RotationState][CU movementerror] -> [Player][movementerror random RotationState]
[Player No RotationState][RotU no NextRotation movementerror] -> [Player][CU]
[Player No RotationState][RotR no NextRotation movementerror] -> [Player][CR]
[Player No RotationState][RotD no NextRotation movementerror] -> [Player][CD]
[Player No RotationState][RotL no NextRotation movementerror] -> [Player][CL]

[Player No RotationState][AU movementerror] -> [Player][movementerror random RotationState]
[Player No RotationState][RotU no NextRotation movementerror] -> [Player][AU]
[Player No RotationState][RotR no NextRotation movementerror] -> [Player][AR]
[Player No RotationState][RotD no NextRotation movementerror] -> [Player][AD]
[Player No RotationState][RotL no NextRotation movementerror] -> [Player][AL]

(randomize remaining cog orientations)
[Cog No RotationState] -> [Cog Random RotationState]
[TwiddleV No RotationState] -> [TwiddleV Random RotU Random RotD]
[TwiddleH No RotationState] -> [TwiddleH Random RotL Random RotR]

(clear movementerror)
[MovementError] -> []

(intro movement)
[Player No Rotatable] -> [Down Player] again


(rotate enemies before messing with player movement)
[CU No MovementError][Moving Player] -> [Right CU][Moving Player]
[CR No MovementError][Moving Player] -> [Right CR][Moving Player]
[CD No MovementError][Moving Player] -> [Right CD][Moving Player]
[CL No MovementError][Moving Player] -> [Right CL][Moving Player]

[AU No MovementError][Moving Player] -> [Left AU][Moving Player]
[AR No MovementError][Moving Player] -> [Left AR][Moving Player]
[AD No MovementError][Moving Player] -> [Left AD][Moving Player]
[AL No MovementError][Moving Player] -> [Left AL][Moving Player]


(=================
 Translation Phase
 =================)

(use Rotatable for collision detection)
(use rotationstate to transfer rotation)
Vertical [> Player Rotatable RotU] -> [Player > Rotatable RotU]
Horizontal [> Player Rotatable RotU] -> [Player Rotatable > RotU]

Vertical [> Player Rotatable RotD] -> [Player > Rotatable RotD]
Horizontal [> Player Rotatable RotD] -> [Player Rotatable < RotD]

Horizontal [> Player Rotatable RotR] -> [Player > Rotatable RotR]
Vertical [> Player Rotatable RotR] -> [Player Rotatable ^ RotR]

Horizontal [> Player Rotatable RotL] -> [Player > Rotatable RotL]
Vertical [> Player Rotatable RotL] -> [Player Rotatable V RotL]


Vertical [Player > Rotatable| RackV] -> [Player > Rotatable| > RackV]
Vertical [> RackV| RackV] -> [> RackV| > RackV]
Horizontal [Player > Rotatable| RackH] -> [Player > Rotatable| > RackH]
Horizontal [> RackH| RackH] -> [> RackH| > RackH]

(==============
 Rotation Phase
 ==============)

startloop

(===============
 Motion Transfer
 ===============)

(cog/twiddle -> cog/twiddle)
horizontal [Hrotatable Left Rotationstate| Hrotatable stationary Rotationstate] -> [Hrotatable Left Rotationstate| Hrotatable Right Rotationstate]
+ horizontal [Hrotatable Right RotationState | Hrotatable stationary RotationState] -> [Hrotatable Right RotationState| Hrotatable Left RotationState]
+ vertical [Vrotatable Left Rotationstate| Vrotatable stationary Rotationstate] -> [Vrotatable Left Rotationstate| Vrotatable Right Rotationstate]
+ vertical [Vrotatable Right RotationState | Vrotatable stationary RotationState] -> [Vrotatable Right RotationState| Vrotatable Left RotationState]

(cog -> rack)
Right [Hrotatable Right RotationState|RackV] -> [HRotatable Right RotationState| Down RackV]
Right [Hrotatable Left RotationState|RackV] -> [Hrotatable Left RotationState| Up RackV]

Down [Vrotatable Right RotationState| RackH] -> [Vrotatable Right RotationState| Left RackH]
Down [Vrotatable Left RotationState| RackH] -> [Vrotatable Left RotationState| Right RackH]

(rack -> rack)
Vertical [Parallel RackV| Stationary RackV] -> [Parallel RackV| Parallel RackV]
Horizontal [Parallel RackH| Stationary RackH] -> [Parallel RackH| Parallel RackH]

(rack -> cog)
Right [Hrotatable RotationState|Down RackV] -> [Hrotatable Right RotationState| Down RackV]
Right [Hrotatable RotationState|Up RackV] -> [Hrotatable Left RotationState| Up RackV]

Down [Vrotatable RotationState| Left RackH] -> [Vrotatable Right RotationState| Left RackH]
Down [Vrotatable RotationState| Right RackH] -> [Vrotatable Left RotationState| Right RackH]

(=========================
 Movement Error Generation
 =========================)

(opposing rotatables)
right [Hrotatable left RotationState|Hrotatable left RotationState] -> [Hrotatable MovementError RotationState|Hrotatable MovementError RotationState]
right [Hrotatable right RotationState|Hrotatable right RotationState] -> [Hrotatable MovementError RotationState|Hrotatable MovementError RotationState]

down [Vrotatable left RotationState|Vrotatable left RotationState] -> [Vrotatable MovementError RotationState|Vrotatable MovementError RotationState]
down [Vrotatable right RotationState|Vrotatable right RotationState] -> [Vrotatable MovementError RotationState|Vrotatable MovementError RotationState]


(split/crushed racks)
Vertical [> RackV| < RackV] -> [MovementError RackV|MovementError RackV]
Vertical [< RackV| > RackV] -> [MovementError RackV|MovementError RackV]

Horizontal [> RackH| < RackH] -> [MovementError RackH|MovementError RackH]
Horizontal [< RackH| > RackH] -> [MovementError RackH|MovementError RackH]

(rack colliding with something)
Vertical [> RackV| VObstacle] -> [MovementError RackV| VObstacle]
Horizontal [> RackH| ObstacleH] -> [MovementError RackH| ObstacleH]

(==========================
 Movement Error Propogation
 ==========================)

(rotatable -> rotatable)
vertical [Vrotatable MovementError RotationState|Vrotatable  RotationState] -> [Vrotatable MovementError RotationState|Vrotatable  MovementError RotationState]
horizontal [Hrotatable MovementError RotationState| Hrotatable RotationState] -> [Hrotatable MovementError RotationState|Hrotatable  MovementError RotationState]

(cog -> rack)
Right [Hrotatable MovementError RotationState|RackV] -> [Hrotatable MovementError RotationState|MovementError RackV]
Down [MovementError RotationState|RackH] -> [MovementError RotationState|MovementError RackH]

(rack -> rack)
Vertical [MovementError RackV| RackV] -> [MovementError RackV| MovementError RackV] 
Horizontal [MovementError RackH| RackH] -> [MovementError RackH| MovementError RackH]

(rack -> cog)
Right [Hrotatable RotationState| movementError RackV] -> [Hrotatable MovementError RotationState|MovementError RackV]
Down [Vrotatable RotationState| MovementError RackH] -> [Vrotatable MovementError RotationState|MovementError RackH]


(Remove Movement)
(with sfx if player)
[Player MovementError] -> sfx0

[MovementError Moveable] -> [MovementError Stationary Moveable] again
[MovementError RotationState] -> [MovementError Stationary RotationState]
[MovementError NextRotation] -> [MovementError Stationary NextRotation]

endloop

(process final rotation state)

[moving RotationState NextRotation] -> [moving RotationState moving NextRotation]

(use action to mark that there has been a rotation)
[right RotU] -> [action RotR]
[right RotR] -> [action RotD]
[right RotD] -> [action RotL]
[right RotL] -> [action RotU]

[left RotU] -> [action RotL]
[left RotL] -> [action RotD]
[left RotD] -> [action RotR]
[left RotR] -> [action RotU]

[right NRotU] -> [action NRotR]
[right NRotR] -> [action NRotD]
[right NRotD] -> [action NRotL]
[right NRotL] -> [action NRotU]

[left NRotU] -> [action NRotL]
[left NRotL] -> [action NRotD]
[left NRotD] -> [action NRotR]
[left NRotR] -> [action NRotU]

(if a twiddle has rotated, change the sprite)
[action RotationState TwiddleV] -> [RotationState TwiddleH]
[action RotationState TwiddleH] -> [RotationState TwiddleV]

(process final translation state)
rigid [Player > Rotatable |Rotatable RotationState] -> [Player > Rotatable| > Rotatable > RotationState]
[> Rotatable > RotationState NextRotation] -> [> Rotatable > RotationState > NextRotation]
rigid [Player > Rotatable RotationState] -> [> Player > Rotatable > RotationState]

==============
WINCONDITIONS
==============
all goal on player

=======
LEVELS
=======
(
.......coo........0
.......o.o.........
.......ooo.........
.......o.o.........
.......o.o.........
.........--------.g

coo.aoo.`oo.a.@oo.0
o...o.o.o...o.o....
o...o.o.o.....ooo..
o...o.o.o.o.....o..
ooo.ooo.ooo...ooo..
..................g

..c...1.2oo.aoo...0
..o...o.o...o......
..o...o.ooo.ooo....
..o...o.o...o......
..ooo.o.o...ooo....
..................g
)
message I am but a cog.

.######
.#p./.#
.#../.#
####/.#
#.../.#
#g.o..#
###o#.#
..#...#
..#####

message A simple part of a complex whole.

....#########
#####..g#...#
#...oo.##po.#
#..#.o..#...#
##.#.------##
.#..........#
.#..######..#
.####....#..#
.........####


########...
#..#.#.#...
#p.././####
#..-/---..#
####.#...##
...##.../#.
....#..-/##
....#..//g#
....#.--.##
....######.



(message I twist and turn searching for purpose.

.#########
.#....#g.#
.#.p./#o/#
##./-/#o.#
#.---.#o.#
#o##.##o.#
#..--.#o.#
##../o...#
.#../----#
.#########
)
(
message Others turn as well.

.############.
.#.....#g..a#.
##.#a.c#..a.#.
#c.##..#.a..#.
#o.a#..#.##.#.
##.##..#a##.##
#c.c#.a..#c.c#
##.##..c.#a.a#
#...##..ao..##
#.p.##...#..##
#############.

message Are they searching for something too?

....###########
....#oooooo...#
....#o.....--p#
#####a........#
#-----....#####
##oo.c....#o/g#
.#a...c.###o..#
.#..ca.a..#o.##
.#.o......oo.#.
.#.o.a...-...#.
.#############.
)
